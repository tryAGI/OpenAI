
#nullable enable

namespace tryAGI.OpenAI
{
    /// <summary>
    /// A tool call to run a function. See the <br/>
    /// [function calling guide](/docs/guides/function-calling) for more information.
    /// </summary>
    public sealed partial class FunctionToolCall
    {
        /// <summary>
        /// A JSON string of the arguments to pass to the function.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("arguments")]
        [global::System.Text.Json.Serialization.JsonRequired]
        public required string Arguments { get; set; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("call_id")]
        [global::System.Text.Json.Serialization.JsonRequired]
        public required string CallId { get; set; }

        /// <summary>
        /// The unique ID of the function tool call.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("name")]
        [global::System.Text.Json.Serialization.JsonRequired]
        public required string Name { get; set; }

        /// <summary>
        /// The status of the item. One of `in_progress`, `completed`, or<br/>
        /// `incomplete`. Populated when items are returned via API.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("status")]
        [global::System.Text.Json.Serialization.JsonConverter(typeof(global::tryAGI.OpenAI.JsonConverters.FunctionToolCallStatusJsonConverter))]
        public global::tryAGI.OpenAI.FunctionToolCallStatus? Status { get; set; }

        /// <summary>
        /// The type of the function tool call. Always `function_call`.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("type")]
        [global::System.Text.Json.Serialization.JsonConverter(typeof(global::tryAGI.OpenAI.JsonConverters.FunctionToolCallTypeJsonConverter))]
        public global::tryAGI.OpenAI.FunctionToolCallType Type { get; set; }

        /// <summary>
        /// Additional properties that are not explicitly defined in the schema
        /// </summary>
        [global::System.Text.Json.Serialization.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties { get; set; } = new global::System.Collections.Generic.Dictionary<string, object>();

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionToolCall" /> class.
        /// </summary>
        /// <param name="arguments">
        /// A JSON string of the arguments to pass to the function.
        /// </param>
        /// <param name="callId">
        /// The unique ID of the function tool call generated by the model.
        /// </param>
        /// <param name="id">
        /// The unique ID of the function tool call.
        /// </param>
        /// <param name="name">
        /// The name of the function to run.
        /// </param>
        /// <param name="status">
        /// The status of the item. One of `in_progress`, `completed`, or<br/>
        /// `incomplete`. Populated when items are returned via API.
        /// </param>
        /// <param name="type">
        /// The type of the function tool call. Always `function_call`.
        /// </param>
#if NET7_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public FunctionToolCall(
            string arguments,
            string callId,
            string name,
            string? id,
            global::tryAGI.OpenAI.FunctionToolCallStatus? status,
            global::tryAGI.OpenAI.FunctionToolCallType type)
        {
            this.Arguments = arguments ?? throw new global::System.ArgumentNullException(nameof(arguments));
            this.CallId = callId ?? throw new global::System.ArgumentNullException(nameof(callId));
            this.Name = name ?? throw new global::System.ArgumentNullException(nameof(name));
            this.Id = id;
            this.Status = status;
            this.Type = type;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionToolCall" /> class.
        /// </summary>
        public FunctionToolCall()
        {
        }
    }
}